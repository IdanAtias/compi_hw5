%{
	#include "hw4.hpp"
	#include "output.hpp"
	#include "symTable.hpp"
	#include <iostream>
	#include <stdio.h>
	#include <vector>
	#include <stack>
	
	using namespace std;
	using namespace output;

	extern int yylex();
	extern int yylineno;
	extern const char* yytext;
	extern FILE* yyin;
	
	void yyerror(const char*);
	bool isTemperture(string type);
	bool checkAssignmentTyps(string t1, string t2);
	string findVarType(string id);
	void printStype(YYSTYPE yst, string msg);
	bool isVarDefined(string id);
	void findAndSetVarIsAssigned(string id, bool val);
	bool isVarAssigned(string id);
	string newTemp();

	//gen temp conversions codes
	string genCelsiusToKelvinCode(string);
	string genCelsiusToFahrenheitCode(string);
	
	string genKelvinToCelsiusCode(string);
	string genKelvinToFahrenheitCode(string);
	
	string genFahrenheitToCelsiusCode(string);
	string genFahrenheitToKelvinCode(string);
	
	string genConversionCode(YYSTYPE st, string type);
	
	vector<SymTable> tablesStack;
	stack<int> offsetStack;
	stack<list<int>> whileNextlists;

	bool condScopeFlag = false;
	int whileCounter = 0;
	
	int tmpIdx = 1;
	
	int isAssignmentStmt = 0;

	#define OFFSET_SIZE 1
	#define OP_ADD
	#define OP_SUB
	#define OP_MUL
	#define OP_DIV
%}



%token LP RP LC RC SC CELSIUS FAHRENHEIT KELVIN INT PRINT INPUT ID STRING TRUE FALSE BOOL IF ELSE WHILE BREAK NUM SWITCH CASE COLON FOREACH

%nonassoc IFX
%nonassoc ELSE
%right ASSIGN
%left OR
%left AND
%left REL_OP
%left PLUS MINUS
%left MULT DIV
%right NOT

%%   

Prog	:	InitMarker stmts FinishMarker

stmts	:  	stmt aux 
					{ 
						//cout << "stmts: stmt aux" << endl;
						bp($1.nextList, next());
					}
				
aux		: 	stmt aux 
					{
						//cout << "aux: stmt aux" << endl;
						bp($1.nextList, next());
					}
				
				|   { 
						//cout << "epsilon" << endl;
					}
stmt	: 	StartScopeMarker LC stmts RC EndScopeMarker
				{
					//cout << "LC StartScopeMarker stmts EndScopeMarker RC" << endl;
					$$.nextList = list<int>();
				}
			| StartScopeMarkerIfCond Type ID SC
				{
					//~ cout << "Type ID SC" << endl;
					$3.type = $2.type;
					//~ cout << yytext << endl;
					//~ cout << condScopeFlag << endl;
					if (isVarDefined($3.id)) {
						errorDef(yylineno, $3.id.c_str());
						exit(1);
					}
					tablesStack.back().insertVar($3.id, $3.type, offsetStack.top(), false /*isAssigned*/);
					int newOffset = offsetStack.top() + OFFSET_SIZE;
					offsetStack.pop();
					offsetStack.push(newOffset);		
					$$.nextList = list<int>();
				}
			| StartScopeMarkerIfCond Type ID ASSIGN Exp SC 
				{
					//~ cout << "Type ID ASSIGN Exp SC" << endl;
					//~ cout << "cond: "<<condScopeFlag << endl;
					$3.type = $2.type;
					if (isVarDefined($3.id)) {
						errorDef(yylineno, $3.id.c_str());
						exit(1);
					}
					if (!checkAssignmentTyps($2.type, $5.type)) {
						errorMismatch(yylineno);
						exit(1);
					}
					tablesStack.back().insertVar($3.id, $3.type, offsetStack.top(), true /*isAssigned*/);
					int newOffset = offsetStack.top() + OFFSET_SIZE;
					offsetStack.pop();
					offsetStack.push(newOffset);
					
					ostringstream os;
					os << "s[" << findVarOffset($3.id) << "]" << "=" << $5.place;
					emit(os.str());
					$$.nextList = list<int>();
				}
			| setCondFlagOff ID ASSIGN Exp SC
				{
					//cout << "ID ASSIGN Exp SC" << endl;
					string idType = findVarType($2.id);
					if (idType == string("")) {
						errorUndef(yylineno, $2.id.c_str());
						exit(1);
					}
					
					if (!checkAssignmentTyps(idType, $4.type)) {
						errorMismatch(yylineno);
						exit(1);
					}
					findAndSetVarIsAssigned($2.id, true);
					ostringstream os;
					os << "s[" << findVarOffset($2.id) << "]" << "=" << $4.place;
					emit(os.str());
					$$.nextList = list<int>();
				}
			| setCondFlagOff PRINT STRING SC 
				{ 
					//cout << "PRINT STRING SC" << endl; 
					ostringstream os;
					os << "print " << $3.id;
					emit(os.str());
					$$.nextList = list<int>();	
				}
			| setCondFlagOff PRINT ID SC
				{
					//cout << "PRINT ID SC" << endl;
					string idType = findVarType($3.id);
					if (idType == string("")){
						errorUndef(yylineno, $3.id.c_str());
						exit(1);
					}
					if (idType == string("BOOL")){
						errorMismatch(yylineno);
						exit(1);
					}
					
					ostringstream os;
					os << "print s[" << findVarOffset($3.id) << "]";
					emit(os.str());
					$$.nextList = list<int>();	
				}
			| setCondFlagOff INPUT ID SC
				{
					//cout << "INPUT ID SC" << endl;
					string idType = findVarType($3.id);
					if (idType == string("")){
						errorUndef(yylineno, $3.id.c_str());
						exit(1);
					}
					if (idType == string("BOOL")){
						errorMismatch(yylineno);
						exit(1);
					}
					// TODO: need to update $$.type?
					ostringstream os;
					os << "input s[" << findVarOffset($3.id) << "]";
					emit(os.str());
					$$.nextList = list<int>();	
				}
			| IF LP ForceBoolExp SetCondFlagOn RP M stmt EndScopeMarkerIfCond %prec IFX
				{
					//~ cout << "IF LP Exp RP stmt %prec IFX" << endl;
					bp($3.truelist, $6.quad);
					$$.nextList = merge($3.falseList, $7.nextList);
				}
			| IF LP ForceBoolExp SetCondFlagOn RP M stmt EndScopeMarkerIfCond 
					ELSE SetCondFlagOn N M stmt EndScopeMarkerIfCond
				{
					//~ cout << "IF LP Exp RP stmt ELSE stmt" << endl;
					bp($3.truelist, $6.quad);
					bp($3.falseList, $12.quad);
					$$.nextList = merge(merge($7.nextList, $13.nextList), $11.nextlist);
				}
			| WHILE LP M ForceBoolExp SetCondFlagOn RP WhileMarker M stmt N EndScopeMarkerIfCond
				{
					//cout << "WHILE LP Exp RP WhileMarker stmt" << endl;
					whileCounter--;
					bp($4.truelist, $8.quad); //pointing "true" if to stmt
					bp($10.nextlist, $3.quad); //pointing the goto after the stmt back to the "if"
					bp($9.nextlist, $3.quad); //pointing the "next" of the stmt back to the "if"
					$$.nextlist = merge($4.falselist, whileNextlists.top()); //merging next list of while and false list of if
					whileNextlists.pop(); //update top of whileNextlist
				}
			| setCondFlagOff BREAK SC
				{
					//~ cout << "BREAK SC" << endl;
					//~ cout << condScopeFlag << endl;
					if (whileCounter <= 0 ) {
						errorUnexpectedBreak(yylineno);
						exit(1);
					}
					list<int>& topWhileNextlists = whileNextlist.top();
					topWhileNextlists = merge(topWhileNextlists, makelist(next());
					emit("goto ");
					$$.nextlist = list<int>();
				}
				
			| FOREACH LP ForceIntId TempType RP OP Exp
				{
					ostringstream os;
					if (!isVarDefined($3.id)) {
						errorUndef(yylineno, $3.id.c_str());
						exit(1);
					}
					if (!isVarAssigned($3.id)) {
						findAndSetVarIsAssigned($3.id, true);
						os << "s[" << findVarOffset($3.id) << "] = 2";
						emit(os.str());
						os.str("");
					}
					//get last id and init un-assigned id's:
					string lastId;
					for (vector<SymTable>::reverse_iterator table = tablesStack.rbegin(); table != tablesStack.rend(); ++table) {
						for (vector<TableLine>::const_iterator line=table.begin(); line != table.end(); line++){
							if (line->type == $4.type){
								lastId = line->id;
								if (!line->isAssigned){
									os << "s[" << line->offset << "]=0";
									emit(os.str());
									os.str("");
									line->id = true;
								}
							}
						}
					}
					
					for (vector<SymTable>::reverse_iterator table = tablesStack.rbegin(); table != tablesStack.rend(); ++table) {
						for (vector<TableLine>::const_iterator line=table.begin(); line != table.end(); line++){
							if (line->type == $4.type){
								string counter = newTemp();
								os << counter << "=" << $3.place; //TODO: check id has place.
								emit(os.str());
								os.str("");
								os << "if " << counter << ">0 goto "<< next()+2;
								emit(os.str());
								os.str("");
								if (line->id == lastId){
									$$.nextlist = makelist(next());
									emit("goto ");
								} else {
									os << "goto " << next()+3;
									emit(os.str());
									os.str("");
								}
								os << "s[" << line->offset << "]= s[" << line->offset << "]"  << $6.id << $7.place;
								emit(os.str());
								os.str("");
								os << counter << "=" << counter << "-1";
								emit(os.str());
								os.str("");
							}
						}
					}
				}
			
			
			
			
			
			| SWITCH LP ForceTempExp N RP LC CasesList RC
				{
					//cout << "SWITCH LP Exp RP LC StartScopeMarker CasesList EndScopeMarker RC" << endl;
					bp($4.nextlist, next()); //preparing the "jump" for the evaluation of the exp.
					while (!$7.valueList.empty()){
						 string val = $7.valueList.pop();
						 string type = $7.typeList.pop();
						 string convertFromType = type;
						 string convertToType = $3.type;
						 if (convertedFromType != convertedToType){
							YYSTYPE convertedVar;
							convertedVar.type = convertedFromType;
							string valPlace = newTemp();
							ostringstream os;
							os << valPlace << "=" << val;
							emit(os.str());
							convertedVar.place = valPlace;
							string convertedPlace = genConversionCode(convertedVar, convertedToType);
							$3.place = convertedPlace;
						 }
						 int quad = $7.quadList.pop();
						 ostringstream os;
						 os << "if " << $3.place << "==" << val << " goto " << quad;
						 emit(os.str());
					}
					$$.nextList = merge($7.nextList, makelist(next()));
					emit("goto ");
				}
		
CasesList : CaseStat CasesList { 
				//cout << "CaseStat CasesList " << endl;
				$$.quadList = $2.quadList;
				$$.quadList.push($1.quad);
				$$.valueList = $2.valueList;
				$$.valueList.push($1.id);
				$$.typeList = $2.typeList;
				$$.typeList.push($1.type);
				$$.nextList = merge($2.nextList, $1.nextList);
				}
			| CaseStat { 
				//cout << "CaseStat " << endl;
				$$.quadList = stack<int>();
				$$.quadList.push($1.quad);
				$$.valueList = stack<string>();
				$$.valueList.push($1.id); // id is the "num" in : case num
				$$.typeList = stack<string>();
				$$.typeList.push($1.type);
				$$.nextList = $1.nextlist();
				}

CaseStat  : CASE NUM TempType COLON SetCondFlagOn M stmt BREAK SC EndScopeMarkerIfCond
				{ 
					//cout << "CASE NUM TempType COLON StartScopeMarker stmt BREAK SC EndScopeMarker " << endl;
					$$.quad = $6.quad;
					$$.type = $3.type;
					$$.id = $2.id;
					$$.nextList = $7.nextList;
				}
				
OP				: PLUS
				| MINUS
				| MUL
				| DIV

TempType  : CELSIUS
				{
					//cout << "CELSIUS" << endl;
					$$.type = $1.type;
					//~ $$.val = $1.val;
				}
			| FAHRENHEIT
				{
					//cout << "FAHRENHEIT" << endl;
					$$.type = $1.type;
					//~ $$.val = $1.val;
				}
			| KELVIN
				{
					//cout << "KELVIN" << endl;
					$$.type = $1.type;
					//~ $$.val = $1.val;
				}
			
Type	  : TempType
				{
					//cout << "TempType" << endl;
					$$.type = $1.type;
					//~ $$.val = $1.val;
				}
			| INT
				{
					//cout << "INT" << endl;
					$$.type = $1.type;
					//~ $$.val = $1.val;
					//~ printStype($1, "INT");
					//~ printStype($$, "Type");
				}
			| BOOL
				{
					//cout << "BOOL" << endl;
					$$.type = $1.type;
					//~ $$.val = $1.val;
				}
ForceTempExp	: Exp
					{
						if (!isTemperture($1.type)) {
							errorMismatch(yylineno);
							exit(1);
						} 
						$$ = $1;
					}
ForceBoolExp	: 	Exp 
					{
						//cout << "ForceBoolExp" << endl;
						if ($1.type != string("BOOL")){
							errorMismatch(yylineno);
							exit(1);
						}
						//~ condScopeFlag = true;
						$$ = $1;
					}
ForceIntId		: 	ID
					{
						if ($1.type != string("INT")) {
							errorMismatch(yylineno);
							exit(1);
						}
						$$ = $1;
					}
	
Exp		  : LP Exp RP 
				{
					//cout << "LP Exp RP" << endl;
					$$ = $2;
				}
			| Exp PLUS Exp
				{
					//cout << "Exp PLUS Exp" << endl;
					if ($1.type == string("INT") && $3.type == string("INT")) {
						$$.type = $1.type;
						$$.place = newTemp();
						ostringstream os;
						os << $$.place << "=" << $1.place << " + " << $3.place;
						emit(os.str());
					} else if (isTemperture($1.type) && isTemperture($3.type)) {
						$$.type = $1.type;
						$$.place = newTemp();
						string convertedSecArg = genConversionCode($3, $1.type);
						ostringstream os;
						os << $$.place << "=" << $1.place << " + " << convertedSecArg;
						emit(os.str()); 
					} else {
						errorMismatch(yylineno);
						exit(1);
					}
				}
			| Exp MINUS Exp
				{
					//cout << "Exp MINUS Exp" << endl;
					if ($1.type == string("INT") && $3.type == string("INT")) {
						$$.type = $1.type;
						$$.place = newTemp();
						ostringstream os;
						os << $$.place << "=" << $1.place << " - " << $3.place;
						emit(os.str());
					} else if (isTemperture($1.type) && isTemperture($3.type)) {
						$$.type = $1.type;
						$$.place = newTemp();
						string convertedSecArg = genConversionCode($3, $1.type);
						ostringstream os;
						os << $$.place << "=" << $1.place << " - " << convertedSecArg;
						emit(os.str()); 
					} else {
						errorMismatch(yylineno);
						exit(1);
					}
				}
			| Exp MULT Exp
				{
						//cout << "Exp MULT Exp" << endl;
					if ($1.type == string("BOOL") || $3.type == string("BOOL")) {
						errorMismatch(yylineno);
						exit(1);
					}					
					if (isTemperture($1.type) && isTemperture($3.type)) {
						errorMismatch(yylineno);
						exit(1);
					}
					if ($1.type == string("INT") && $3.type == string("INT")) {
						$$.type = $1.type;
					} else /*1 temp & 1 int*/ {
						YYSTYPE temp = isTemperture($1.type) ? $1 : $3;
						YYSTYPE num = !isTemperture($1.type) ? $1 : $3;
						$$.type = temp.type;
					}
					$$.place = newTemp();
					ostringstream os;
					os << $$.place << "=" << $1.place << " * " << $3.place;
					emit(os.str());
				}
			| Exp DIV Exp
				{
					//cout << "Exp DIV Exp" << endl;
					if ($1.type == string("INT") && $3.type == string("INT")) {
						$$.type = $1.type;
						$$.place = newTemp();
						ostringstream os;
						os << $$.place << "=" << $1.place << " / " << $3.place;
						emit(os.str());
					} else if (isTemperture($1.type) && isTemperture($3.type)) {
						$$.type = string("INT");
						$$.place = newTemp();
						string convertedSecArg = genConversionCode($3, $1.type);
						ostringstream os;
						os << $$.place << "=" << $1.place << " / " << convertedSecArg;
						emit(os.str()); 
					} else if(isTemperture($1.type) && $3.type == string("INT")) {
						$$.type = $1.type;
						$$.place = newTemp();
						ostringstream os;
						os << $$.place << "=" << $1.place << " / " << $3.place;
						emit(os.str());
					} else {
						errorMismatch(yylineno);
						exit(1);
					}
				}
			| ID
				{	
					//cout << "ID" << endl;
					string varType = findVarType($1.id);
					if (varType == string("")) {
						errorUndef(yylineno, $1.id.c_str());
						exit(1);
					}
					
					int idOffset = findVarOffset($1.id);
					ostringstream os;
					$$.type = varType;

					if (varType == string("BOOL") && !isAssignmentStmt){
						$$.truelist = makelist(next()); // leave room for backpatching at the "if" stmt
						os <<  "if s[" << idOffset << "] == 1 goto ";
						emit(os.str());
						$$.falselist = makelist(next()); // leave room for backpatching the "goto" stmt
						emit("goto ");
					} else {
						$$.id = $1.id;
						$$.place = newTemp();
						os << $$.place << "=s[" << idOffset << "]";
						emit(os.str());
					}
				}
			| NUM
				{
					//cout << "NUM" << endl;
					if ($1.type != string("INT")) {
						errorMismatch(yylineno);
						exit(1);
					}
					$$.type = $1.type;
					$$.place = newTemp();
					ostringstream os;
					os << $$.place << "=" << $1.id;
					emit(os.str());
				}
			| NUM TempType 
				{
					//cout << "NUM TempType " << endl;
					if (!(isTemperture($2.type)) ||
					!($1.type == string("INT"))) {
						errorMismatch(yylineno);
						exit(1);
					}
					$$.type = $2.type;
					$$.place = newTemp();
					ostringstream os;
					os << $$.place << "=" << $1.id;
					emit(os.str());
				}
			| TRUE
				{
					//cout << "TRUE" << endl;
					$$.type = $1.type;
					$$.place = newTemp();
					ostringstream os;
					os << $$.place << "=1";
					emit(os.str());
				}
			| FALSE
				{
					//cout << "FALSE" << endl;
					$$.type = $1.type;
					$$.place = newTemp();
					ostringstream os;
					os << $$.place << "=0";
					emit(os.str());
				}
			| NOT Exp 
				{
					//cout << "NOT Exp" << endl;
					if ($2.type != string("BOOL")) {
						errorMismatch(yylineno);
						exit(1);
					}
					if (isAssignmentStmt){
						$$.type = string("BOOL");
						$$.place = newTemp();
						ostringstream os;
						os << "if " << $2.place << " == 1 goto " << next()+3;
						emit(os.str());
						os.str(""); // "clear" os
						os << $$.place << "=1";
						emit(os.str());
						os.str("");
						os << "goto " << next()+2;
						emit(os.str());
						os.str("");
						os << $$.place << "=0";
						emit(os.str());
					} else {
						$$.truelist = $2.falselist;
						$$.falselist = $2.truelist;
					}
					
				}
			| Exp OR M Exp
				{
					//cout << "Exp OR Exp" << endl;
					if ($1.type != string("BOOL") || $3.type != string("BOOL")){
						errorMismatch(yylineno);
						exit(1);
					}
					if(isAssignmentStmt){
						$$.place = newTemp();
						ostringstream os;
						os << "if " << $1.place << " == 1 goto " << next()+4;
						emit(os.str());
						os.str("");
						os << "if " << $4.place << " == 1 goto " << next()+3;
						emit(os.str());
						os.str("");
						os << $$.place << "=0";
						emit(os.str());
						os.str("");
						os << "goto " << next()+2;
						emit(os.str());
						os.str("");
						os << $$.place << "=1";
						emit(os.str());
					} else {
						bp($1.falseList, $3.quad);
						$$.trueList = merge($1.trueList, $4.trueList);
						$$.falseList = $4.falseList;
					}
					$$.type = string("BOOL");
				}
			| Exp AND M Exp
				{
					//cout << "Exp AND Exp" << endl;
					if ($1.type != string("BOOL") || $3.type != string("BOOL")){
						errorMismatch(yylineno);
						exit(1);
					}
					if(isAssignmentStmt){
						$$.place = newTemp();
						createNewSymbol($$.place, $$.type);
						ostringstream os;
						os << "if " << $1.place << " == 0 goto " << next()+4;
						emit(os.str());
						os.str("");
						os << "if " << $4.place << " == 0 goto " << next()+3;
						emit(os.str());
						os.str("");
						os << $$.place << "=1";
						emit(os.str());
						os.str("");
						os << "goto " << next()+2;
						emit(os.str());
						os.str("");
						os << $$.place << "=0";
						emit(os.str());
					}
					else{
						bp($1.trueList, $3.quad);
						$$.falseList = merge($1.falseList, $4.falseList);
						$$.trueList = $4.trueList;
					}
					$$.type = string("BOOL");
				}
			| Exp REL_OP Exp 
				{
					//cout << "Exp REL_OP Exp" << endl;
					if (isTemperture($1.type) && isTemperture($3.type)) {
						$3.place = genConversionCode($3, $1.type);	
					}
					
					if (($1.type == string("INT") && $3.type == string("INT")) ||
							(isTemperture($1.type) && isTemperture($3.type))) {
						
						$$.type = string("BOOL");
						ostringstream os;
						
						if ($2.id == string("<=") {
								os << $1.place << " = " << $1.place << " -1";
								emit(os.str());
								$2.id = "<";
						}
						
						if ($2.id == string(">=") {
							os << $1.place << " = " << $1.place << " +1";
							emit(os.str());
							$2.id = ">";	
						}
						
						if (isAssignmentStmt) {
							$$.place = newTemp();
							os.str("");
							os << "if " << $1.place << $2.id << $3.place << " goto " << next()+3;
							emit(os.str());
							os.str("");
							os << $$.place << "=0";
							emit(os.str());
							os.str("");
							os << "goto " << next()+2;
							emit(os.str());
							os.str("");
							os << $$.place << "=1";
							emit(os.str());
							os.str("");
						} else {
							
							$$.trueList = makelist(next());
							os << "if " << $1.place << " " << $2.id << " " << $3.place << " goto ";
							emit(os.str());
							$$.falseList = makelist(next());
							emit("goto ");
						}
					} else {
						errorMismatch(yylineno);
						exit(1);
					}
				}

setCondFlagOff	: {
					condScopeFlag = false;
				  }

SetCondFlagOn : {
				//cout << "setCondFlag " << endl;
				condScopeFlag = true;
				}

InitMarker	:	{
					//cout << "InitMarker" << endl;
					tablesStack.push_back(SymTable());
					offsetStack.push(0);
				}
FinishMarker : 	{
					//cout << "FinishMarker" << endl;
					endScope();
					tablesStack.back().printTable();
					tablesStack.pop_back();
					offsetStack.pop();
				}

WhileMarker	 :	{
					//cout << "WhileMarker" << endl;
					whileNextlists.push(list<int>());
					whileCounter++;
				}
			

EndScopeMarker	:	{
						//cout << "EndScopeMarker" << endl;
						condScopeFlag = false;
						endScope();
						tablesStack.back().printTable();
						tablesStack.pop_back();
						offsetStack.pop();
					}				
					
StartScopeMarker	:	{
							//cout << "StartScopeMarker" << endl;
							condScopeFlag = false;
							tablesStack.push_back(SymTable());
							offsetStack.push(offsetStack.top());
						}

EndScopeMarkerIfCond	:	{
								if (condScopeFlag){
									condScopeFlag = false;
									endScope();
									tablesStack.back().printTable();
									tablesStack.pop_back();
									offsetStack.pop();
								}
							}				
					
StartScopeMarkerIfCond	:	{
								if (condScopeFlag){
									tablesStack.push_back(SymTable());
									offsetStack.push(offsetStack.top());
								}
							}
							
M: {
	 $$.quad = next();
   }

N: {
	$$.nextlist = makelist(next());
	emit("goto "); 
   }


%%

string newTemp()
{
	ostringstream os;
	os << "@t" << tmpIdx;
	tmpIdx++;
	return os.str();	
}

void yyerror(const char*){
	errorSyn(yylineno);
	exit(1);
}

bool checkAssignmentTyps(string t1, string t2) {	
	if (t2 == string("BOOL") && t1 != string("BOOL")) return false;
	if (t2 == string("INT") && t1 != string("INT")) return false;
	if (isTemperture(t2) && !isTemperture(t1)) return false;
	
	return true;
}
string findVarType(string id) {
	for (vector<SymTable>::reverse_iterator iter = tablesStack.rbegin(); iter != tablesStack.rend(); ++iter) {
		if(iter->isVarDefined(id)) {
			return iter->getVarType(id);
		}
	}
	return string("");
}

int findVarOffset(string id){
	for (vector<SymTable>::reverse_iterator iter = tablesStack.rbegin(); iter != tablesStack.rend(); ++iter) {
		if(iter->isVarDefined(id)) {
			return iter->getVarOffset(id);
		}
	}
	return -1;
}

void findAndSetVarIsAssigned(string id, bool val){
	for (vector<SymTable>::reverse_iterator iter = tablesStack.rbegin(); iter != tablesStack.rend(); ++iter) {
		if(iter->isVarDefined(id)) {
			iter->setIsVarAssigned(id, val);
		}
	}
}

bool isVarAssigned(string id){
	for (vector<SymTable>::reverse_iterator iter = tablesStack.rbegin(); iter != tablesStack.rend(); ++iter) {
		if(iter->isVarDefined(id)) {
			return iter->isVarAssigned(id);
		}
	}
	return false;
}

bool isVarDefined(string id){
	for (vector<SymTable>::reverse_iterator iter = tablesStack.rbegin(); iter != tablesStack.rend(); ++iter) {
		if(iter->isVarDefined(id)) {
			return true;
		}
	}
	return false;
}

bool isTemperture(string type) {
	return (type == string("FAHRENHEIT") || type == string("CELSIUS") || type == string("KELVIN"));
}

string genCelsiusToKelvinCode(string celVarToConv){
	ostringstream os;
	string res = newTemp();
	
	os << res << "=" << celVarToConv << "+273";
	emit(os.str());
	
	return res;

	//return cel + 273
}

string genCelsiusToFahrenheitCode(string celVarToConv){
	ostringstream os1, os2, os3;
	string res = newTemp();
	string mulRes = newTemp();
	string divAfterMulRes = newTemp();

	os1 << mulRes << "=" << celVarToConv << "*9";
	emit(os1.str());
	
	os2 << divAfterMulRes << "=" << mulRes << "/5";
	emit(os2.str());
	
	os3 << res << "=" << divAfterMulRes << "+32";
	emit(os3.str());
	
	return res;
	//return (cel * 9 / 5) + 32;	
}
	
string genKelvinToCelsiusCode(string kelVarToConv){
	ostringstream os;
	string res = newTemp();
	
	os << res << "=" << kelVarToConv << "-273";
	emit(os.str());
	
	return res;
	//return kel - 273;
}

string genKelvinToFahrenheitCode(string kelVarToConv){
	string convertedToCelVar = genKelvinToCelsiusCode(kelVarToConv);
	return genCelsiusToFahrenheitCode(convertedToCelVar);
}

string genFahrenheitToCelsiusCode(string fahVarToConv){
	ostringstream os1, os2, os3;
	string res = newTemp();
	string subRes = newTemp();
	string mulAfterSubRes = newTemp();

	os1 << subRes << "=" << fahVarToConv << "-32";
	emit(os1.str());
	
	os2 << mulAfterSubRes << "=" << subRes << "*5";
	emit(os2.str());
	
	os3 << res << "=" << mulAfterSubRes << "/9";
	emit(os3.str());

	return res;
	
	//return (fah - 32) * 5 / 9;

}

string genFahrenheitToKelvinCode(string fahVarToConv){
	string convertedCelVar = genFahrenheitToCelsiusCode(fahVarToConv);
	return genCelsiusToKelvinCode(convertedCelVar);
}

//creating the ir-code for converting temparture
//returning the variable name that holds the result of the conversions
string genConversionCode(YYSTYPE st, string type){
	if (st.type == type){
		return st.place;
	}
	if (type == string("CELSIUS")){
		switch (st.type){
			case string("FAHRENHEIT") 	: return genFahrenheitToCelsiusCode(st.place);
			case string("KELVIN") 		: return genKelvinToCelsiusCode(st.place);
		}
	} else if (type == "FAHRENHEIT") {
	 	switch (st.type){
			case string("CELSIUS") 		: return genCelsiusToFahrenheitCode(st.place);
			case string("KELVIN") 		: return genKelvinToFahrenheitCode(st.place);
		}
	} else { //KELVIN
		switch (st.type){
			case string("CELSIUS") 		: return genCelsiusToKelvinCode(st.place);
			case string("FAHRENHEIT") 	: return genFahrenheitToKelvinCode(st.place);
		}
	}
}

void printStype(YYSTYPE yst, string msg){
	cout << msg + ":" << endl;
	cout << "type = " + yst.type << endl;
	cout << "id = " + yst.id << endl;
}

int getIdOffset(const string& id){
	//cout << "looking for " << id << endl;
	for(int i=0; i < ; ++i){
		vector<Symbol>::iterator symbol = find(symbols.begin(), symbols.end(), Symbol(id, 0, 0, currentScope-i));
		if(symbol != symbols.end()){
			return symbol->getOffset();
		}
	}
	return -1;
}

int main(int argc, char* argv[]) {
	if (argc < 2) {
		exit(1);
	}
	yyin = fopen(argv[1], "r");
	int parse_res = yyparse();
	printBuffer();
	if (yyin != NULL){
		fclose(yyin);
	}
	return parse_res;
}
